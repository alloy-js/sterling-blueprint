import { ITreeNode, Position, Tooltip, Tree } from '@blueprintjs/core';
import { AlloySource } from 'alloy-ts';
import React from 'react';
import SideBar from '../SideBar';

export interface ISourceViewSideBarProps {
    active: AlloySource | null,
    files: Array<AlloySource>,
    xml: AlloySource | null,
    onChooseSource: Function
}

class SourceViewSideBar extends React.Component<ISourceViewSideBarProps> {

    render (): React.ReactNode {

        return (
            <SideBar>
                <Tree
                    contents={this._generate_nodes()}
                    onNodeClick={this._handleNodeClick.bind(this)}/>
            </SideBar>
        )

    }

    private _generate_nodes (): Array<ITreeNode<AlloySource>> {

        let nodes: Array<ITreeNode<AlloySource>> = [];

        nodes.push({
            id: 0,
            label: 'Alloy',
            hasCaret: true,
            isExpanded: true,
            childNodes: this.props.files.map((source: AlloySource, i: number) => {

                const label = <Tooltip
                    content={source.filename()}
                    position={Position.RIGHT}>
                    {filename(source.filename())}
                </Tooltip>;

                return {
                    id: i,
                    label: label,
                    icon: 'document',
                    isSelected: source === this.props.active,
                    nodeData: source
                }
            })
        });

        const xml = this.props.xml;

        if (xml) {

            const label = <Tooltip
                content='The XML output that was generated by Alloy'
                position={Position.BOTTOM}>
                {'XML'}
            </Tooltip>;

            nodes.push({
                id: 1,
                label: label,
                icon: 'document',
                isSelected: xml === this.props.active,
                nodeData: xml
            })
        }

        return nodes;

    }

    private _handleNodeClick (node: ITreeNode<AlloySource>) {

        if (node.nodeData) {
            this.props.onChooseSource(node.nodeData);
        }

    }

}

function filename (filepath: string): string {

    return filepath.split(/(\\|\/)/g).pop() || '';

}

export default SourceViewSideBar;
